
# This is a basic workflow to help you get started with Actions

name: CI-coit-backend1-stage

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "stage" ]
  pull_request:
    branches: [ "stage" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

#global environment variable 
env: 
  sonar_scanner_version: 4.7.0.2747-linux
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: champion2 # Add your cluster name here.
  GKE_ZONE: us-west1-a # Add your cluster zone here.


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
      # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
       - uses: actions/checkout@v3

       # setup sonar scanner 
       - name: Setup Sonar-Scanner
         run: | 
          wget "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$sonar_scanner_version.zip"
          unzip sonar-scanner-cli-$sonar_scanner_version.zip -d $HOME/sonarqube
          chmod 755 $HOME/sonarqube/sonar-scanner-$sonar_scanner_version/bin/sonar-scanner

       # scan the project using sonar scanner
       - name: scan the project
         env: 
          sonarqube_project: ${{ secrets.SONARQUBE_PROJECT }}
          api_key: ${{ secrets.API_KEY }}
          sonarqube_url: ${{ secrets.SONARQUBE_URL }}
         run: | 
           cd coit-backend1
           $HOME/sonarqube/sonar-scanner-$sonar_scanner_version/bin/sonar-scanner \
           -Dsonar.projectKey=$sonarqube_project \
           -Dsonar.sources=. \
           -Dsonar.host.url=$sonarqube_url \
           -Dsonar.login=$api_key 

       # Run unit Test
       - name: run unit test
         run: | 
          cd coit-frontend
          mvn clean test || true 

       

       